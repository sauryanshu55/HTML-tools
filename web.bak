#lang racket
;;;CSC151 Functional Problem solving/w lab
;;;DATE: 21st November '21
;;;CITATIONS: 1) CSC 151 Mini project 3, part 2
;;;           2)https://www.sketchengine.eu/english-word-list/
;             3)https://www.sketchengine.eu/spanish-word-list/
;             4) CSC 151 Mini Project 3, Last part

;;;----------------------------------PART ONE------------------------------------------------------------------
(require csc151www)
(require csc151/rex)
(require csc151)
(require rackunit)


;;;EXTRACTING ALL THE CONTENTS INSIDE THE HTML FILE

;;;(contents-extracted filename)-> list?
;;;filename-> string? w/ extension .htm or .html
;;; Returns a list of all the words in the given file
(define contents-extracted
  (lambda (filename)
    (let* ([xml-code (file->xml filename)]
           [content (apply string-append (sxpath-match "//text()" xml-code))]
           [rex-word (rex-repeat (rex-any-of (rex-char-range #\a #\z)
                                             (rex-char-range #\A #\Z)
                                             (rex-string "'")))])
      (rex-find-matches rex-word content))))

;;;CALCULATING DALE C HALL SCORES FROM THE HTML CONTENTS

;;;(total-words filename)-> integer?
;;;filename-> string? (The file muts be written in the format "exapmple.txt"
;;;Returns the total number of words in (extracted-words filename)
(define total-words
  (lambda (filename)
    (length (contents-extracted filename))))


;;;(num-sentences filename)->integer?
;;;filename-> string? (The file muts be written in the format "exapmple.txt"
;;;Returns the number of sentences in the file input, <filename>
(define num-sentences
  (lambda (filename)
    (let* ([xml-code (file->xml filename)]
           [content (apply string-append (sxpath-match "//text()" xml-code))]
           [ends/w-fullstop (length (string-split content "."))]
           [ends/w-! (length (string-split content "!"))])
      (+ ends/w-fullstop ends/w-!))))

;;;easy-words->list?
;;;Returns a list of all the easy words as specified by the Dale C Hall method
(define easy-words
  (let ([rex-word
         (rex-repeat (rex-any-of (rex-char-range #\a #\z)
                                 (rex-char-range #\A #\Z)
                                 (rex-string "'")))])

    (rex-find-matches rex-word (file->string "Easy.txt"))))


(require csc151)
;;;(element? str)-> list? (of booleans)
;;;str->string?
;;;Returns #t for all the words that are in the Dale C Hall easy word list
(define element?
  (lambda (str)
    (member? str (map string-downcase easy-words))))


;;;(num-difficult-words filename)->integer?
;;;filename-> string? /w extension .htm or .html
;;;Retunrs the number of difficult words in the file input after cross referencing with the lits of easy words provided by the Dale C Hall model
(define num-difficult-words
  (lambda (filename)
    (- (length (contents-extracted filename)) (count identity (map element? (map string-downcase (contents-extracted filename)))))))


;;;(PDW filename)->integer?
;;;filename-> string? (The file muts be written in the format "exapmple.txt"
;;;Returns the ratio of difficult words to the total words- The Percentage of difficult words
(define PDW
  (lambda (filename)
    (/ (num-difficult-words filename) (total-words filename))))


;;;(ASL filename)->number?
;;;filename-> string? (The file muts be written in the format "exapmple.txt"
;;;Returns the ratio of the total words to the number of sentences- The average sentence length
(define ASL
  (lambda (filename)
    (/ (total-words filename) (num-sentences filename))))

;;;(PDW>5? filename)->boolean?
;;;filename-> string? (The file muts be written in the format "exapmple.txt"
;;Returns true if the value of (PDW filename)> 5%
(define PDW>5?
  (lambda (filename)
    (> (* 100 (/ (num-difficult-words filename) (total-words filename))) 5)))

;;;(compute-dale-chall-score filename)->number?
;;;filename-> string? (The file muts be written in the format "exapmple.txt"
;;;Retunrs the value of the Dale C Hall score
(define compute-dale-chall-score
  (lambda (filename)
    (if (PDW>5? filename)
        (+ (+ (* 0.1579 (PDW filename) 100) (* 0.0496 (ASL filename))) 3.6365)
        (+ (* 0.1579 (PDW filename) 100) (* 0.0496 (ASL filename))))))

;;;(score->grade filename)->string?
;;;filename-> string? (The file muts be written in the format "exapmple.txt"
;;;Returns the Dale C Hall grade level of the text input
(define score->grade
  (lambda (filename)
    (cond
      ((< (compute-dale-chall-score filename) 5)
       "4th grade or lower")
      ((and (< (compute-dale-chall-score filename) 6) (>= (compute-dale-chall-score filename) 5))
       "5th-6th grade")
      ((and (< (compute-dale-chall-score filename) 7) (>= (compute-dale-chall-score filename) 6))
       "7th-8th grade")
      ((and (< (compute-dale-chall-score filename) 8) (>= (compute-dale-chall-score filename) 7))
       "9th-10th grade")
      ((and (< (compute-dale-chall-score filename) 9) (>= (compute-dale-chall-score filename) 8))
       "11th-12th grade")
      ((>= (compute-dale-chall-score filename) 9)
       "13th-15th grade"))))

;;;SAVING THE INFORMATION IN AN HTML FILE

;;;(html-base-markup filename)->string? (HTML text)
;;;filename: string? w/ .htm or .html extension
;;;Makes a string for the base code of the HHTML file to be written and created by (add-dc-info infile outfile)
(define html-base-markup
  (let* ([str->num (lambda (n) (number->string n))])
    (lambda (filename)
      (string-append "<em>Total words: </em>" (str->num (total-words filename)) "( Difficult words:  " (str->num(num-difficult-words filename)) "<br>"
                     "<em>Number of sentences: </em>" (str->num (num-sentences filename)) "<br>"
                     "<strong> Given a score of " (str->num (compute-dale-chall-score filename)) ", this document is approbriate for <b> " (score->grade filename) " level of audience. </b></strong>"))))

;;;(extract-html-body infile)->list?
;;;infile: string? (w/ .html OR .htm file extension)
;;;Extracts the body part of the HTML file, given from infile
(define extract-html-body
  (lambda (infile)
    (let* ([html-code (file->string infile)]
           [body-rex (rex-concat (rex-string "<body>")
                                 (rex-repeat-0 (rex-any-char))
                                 (rex-string "</body>"))]
           )
      (rex-find-matches body-rex html-code))))


;;;(add-dc-info infile outfile)->void?
;;;infile: string? w/ a .htm or .html extension
;;;outfile string> w/o an extension
;;;Takes in the content of an input file, infile, calculates the Dale C hall score and then saves it into a new file, named outfile
(define add-dc-info
  (let* ([add-extension (lambda (str) (string-append str ".html"))])
    (lambda (infile outfile)
      (string->file (string-append "<!DOCTYPE html><html><head> CONTENTS</head>"
                                   (html-base-markup infile)              
                                   (string-join (extract-html-body infile))
                                   "</body></html>")
                    (add-extension outfile)))))


;;;-----------------------------------------PART TWO------------------------------------

(require csc151www)
(require csc151/rex)
(require csc151)
(require rackunit)
(require csc151www)
;;;(list-of-headers infile)->list?
;;;infile: string? (w/ .html OR .htm file extension)
;;;Returns a list of all the headers in the HTML Code
(define list-of-headers
  (lambda (infile)
    (let* ([xml-code (string->xml (file->string infile))]
           [h1 (sxpath-match "//h1" xml-code)]
           [h2 (sxpath-match "//h2" xml-code)]
           [h3 (sxpath-match "//h3" xml-code)]
           [h4 (sxpath-match "//h4" xml-code)]
           [h5 (sxpath-match "//h5" xml-code)]
           [h6 (sxpath-match "//h6" xml-code)]
           [last-elt (lambda (lst) (car (reverse lst)))]

           )
      (flatten (list (map last-elt h1)
                     (map last-elt h2)
                     (map last-elt h3)
                     (map last-elt h4)
                     (map last-elt h5)
                     (map last-elt h6))))))

;;;(make-list-of-contents lst)->list?
;;;lst: list?
;;;Returns a list of the headers, inside the <a href> tags
(define make-list-of-contents
  (lambda (lst)
    (if (null? lst)
        null
        (cons (string-append "<a href=https://www.youtube.com/>" (car lst) "</a><br>") (make-list-of-contents (cdr lst))))))
;;;(contents infile)->string?
;;;infile: string? (w/ .html OR .htm file extension)
;;;Returns a string in the HTML format that has the names of 
(define contents
  (lambda (infile)
    (let* ([headers (list-of-headers infile)]
           [list-of-contents (make-list-of-contents headers)]

           )
      (string-append "<div class=toc>" (string-join list-of-contents) "</div>"))))


;;;(add-toc infile outfile)->file?
;;;infile:  string? (w/ .html OR .htm file extension)
;;;outfile: string? (w/ .html OR .htm file extension) 
;;;Adds a table of contents from the infile to outfile
(define add-toc
  (lambda (infile outfile)
    (string->file (string-append "<!DOCTYPE html><html><head> CONTENTS</head>"
                                 (contents infile)              
                                 (string-join (extract-html-body infile))
                                 "</body></html>")
                  outfile)))
               
    
;;;;---------------------------------------PART THREE------------------------------------


(require csc151www)

;;;Accessibility testing with Image alternative tag

;;;(num-img-codes url)->integer?
;;;url: valid url w/ html webpage?
;;;Returns the number of <img...> codes on the HTML file of the given webpage of url
(define num-img-codes
  (lambda (url)
    (let* ([xml-code (fetch-page url)]
           [w/img-attribute (sxpath-match "//img" xml-code)])
      (length w/img-attribute))))


;;;(num-img-codes/w-alt url)->integer?
;;;url: valid url w/html webpage?
;;;Returns the number of <img..> tags which has the alt attribute
(define num-img-codes/w-alt
  (lambda (url)
    (let* ([xml-code (fetch-page url)]
           [w/alt-attribute (sxpath-match "//img[@alt]" xml-code)])
      (length w/alt-attribute))))

;;;(image-alt-accessibility url)->boolean?
;;;url: valid url w/html webpage?
;;;Returns true if all the imgae tags have the alt attribute
(define image-alt-accessibility?
  (lambda (url)
    (if (and (not (eq? (num-img-codes url) 0)) (= (num-img-codes url) (num-img-codes/w-alt url))); If there are img tags & equal number of img tags using alt attribute and img tags
        #t; then it is accessible
        #f))); else it is not accessible
#| Example
>(image-alt-accessibility? "https://jimenezp.cs.grinnell.edu/Courses/CSC151/2021Fa/assignments/mp07.html")
#t|#

(require csc151)
;;;Accessibility testing with meaningfulness of URL identifiers


;;;(list-of-ahref-tags url)->listof-string?
;;;url: string? (valid URL from the internet)
;;;Returns a list of all the <a href> tags from the html file of the URL
(define list-of-ahref-tags
  (lambda (url)
    (let* ([xml-code (fetch-page url)])
      (sxpath-match "//a[@href]" xml-code))))



;;;(list-of-url-identifiers url)->boolean?
;;;url: string? (valid URL from the internet)
;;;Gives a list of URL identifiers from the <a href> tags
(define list-of-url-identifiers
  (lambda (url)
    (let* ([last-elt (lambda (lst) (car (reverse lst)))]
           [xml-code (fetch-page url)]
           [ahref-tags (list-of-ahref-tags url)]
           )
      (map last-elt ahref-tags))))

(require csc151/rex)

;;;url-rex
;;;rex-expression for sorting out whether identifiers are still in URL format or not
(define url-rex
  (rex-concat (rex-any-of (rex-string "https")
                          (rex-string "http"))
              (rex-repeat (rex-any-char))))

;;;(num-click-here url)->integer?
;;;url: string? (valid URL from the internet)
;;Counts the  number of Url identifiers that have "Click here" written
(define num-click-here
  (lambda(url)
    (let* ([xml-code (fetch-page url)]
           [click-here? (lambda (str) (equal? (string-downcase str) "click here"))]
           )
      (count identity (map click-here? (list-of-url-identifiers url))))))



;;;(number-of-invalid-url-identifiers url)->integer?
;;;url: string? (valid URL from the internet)
;;;Gives the number of invalid URL identifiers (identifiers that are not meaningful)
(define number-of-invalid-url-identifiers
  (lambda (url)
    (let* ([xml-code (fetch-page url)]
           [find-matches (lambda (str) (rex-matches? url-rex str))])
      (+ (num-click-here url) (count identity (map find-matches (list-of-url-identifiers url)))))))



;;;(url-accessibility? url)->boolean?
;;;url: string? (valid URL from the internet)
;;:Returns true if the identifier of the URL is meaningful
(define url-identifier-accessibility?
  (lambda (url)
    (if (> (number-of-invalid-url-identifiers url) 0)
        #f
        #t)))



;;;Accessibility testing with testing spaces between links

;;;(space-between-links url)->integer?
;;;url: string? (valid URL from the internet)
;;Rteunrs the number of links that have nothing in between them
(define space-between-links
  (lambda (url)
    (let* ([rex-word (rex-concat (rex-string "</a>")
                                 (rex-string "<a href="))]
           [xml-code (fetch-page url)]
           [html-code (xml->string xml-code)]
           )
      (count identity (rex-find-matches rex-word html-code)))))

;;;(space-accessibility? url)->boolean?
;;;url: string? (valid URL from the internet)
;;;Returns true if there are no two links that have at least something in between them
(define space-accessibility?
  (lambda (url)
    (if (> (space-between-links url) 0)
        #f
        #t)))


;;;Overall URL Accessibility testing

;;;(accessible? url)->boolean?
;;url: string? (valid URL from the internet)
;;;Returns true if the webpage is accessible, false if it isnt
(define accessible?
  (lambda (url)
    (if (and (image-alt-accessibility? url) (url-identifier-accessibility? url) (space-accessibility? url))
        #t
        #f)))



(define accessibility-tally
  (lambda (url)
    (string-append "NUMBER OF TWO LINKS WITHOUT ANY SPACES: " (number->string (space-between-links url))
                   " NUMBER OF INVALID URL's: " (number->string (number-of-invalid-url-identifiers url))
                   " NUMBER OF IMAGE TAGS WITH ALTERNATIVE TEXT: " (number->string (num-img-codes/w-alt url)))))


;;;-------------------------------------------------------PART FOUR----------------------------------------------------------------------------

;;;(middle-slobovia-jargon->hash-table?
;;;Table of the replacements for the middle Slobovia dialect 
(define middle-slobovia-jargon (make-hash))
(hash-set! middle-slobovia-jargon "president" "supreme Ruler")
(hash-set! middle-slobovia-jargon "biden" "bye Done")
(hash-set! middle-slobovia-jargon "vaccine" "tracing serum")
(hash-set! middle-slobovia-jargon "virus" "myth")
(hash-set! middle-slobovia-jargon "progressive" "anti-american")
(hash-set! middle-slobovia-jargon "liberal" "marxist")
(hash-set! middle-slobovia-jargon "republican" "authoriatarian")
(hash-set! middle-slobovia-jargon"democrat" "traitor")
(hash-set! middle-slobovia-jargon "scientist" "liar")
(hash-set! middle-slobovia-jargon "science" "lies")
(hash-set! middle-slobovia-jargon "college" "cult")
(hash-set! middle-slobovia-jargon "professor" "indoctrinator")
(hash-set! middle-slobovia-jargon "student" "cultist")
(hash-set! middle-slobovia-jargon "midwest" "heartland")
(require csc151)
(require csc151/rex)



;;;(string->list str)->list?
;;;str: string?
;;;Takes in a string and converts all the words into a list of strings
(define string->list
  (lambda (str)
    (let* ([rex-word (rex-repeat (rex-any-of (rex-char-range #\a #\z)
                                             (rex-char-range #\A #\Z)
                                             (rex-string "'")))])
      (rex-find-matches rex-word str))))


;;;(replace/kernel lst)-> void?
;;;lst: list?
;;;Replaces values that have a substritute in the middle Slovobian dialect 
(define replace/kernel
  (lambda (lst)
    (if (null? lst)
        null
        (if (hash-has-key? middle-slobovia-jargon (string-downcase (car lst)))
            (cons (hash-ref middle-slobovia-jargon (string-downcase (car lst))) (replace/kernel (cdr lst)))
            (cons (car lst) (replace/kernel (cdr lst)))))))

;;;(append/w-space str)->void?
;;;str: string?
;;;Appends all the strings of the list into a single string with a space in between
(define append/w-space
  (lambda (str)
    (string-append str " ")))

;;;(replace-xml-text str)->string?
;;;str: string?
;;;Takes in a string and replcaes strings that have a substitute in the middle slobovian dialect with the substitute
(define replace-xml-text
  (lambda (str)
    (apply string-append (map append/w-space (replace/kernel (string->list str))))))


;;;(slobovicize/kernel val) & (slobovicize val)->sxml?
;;;val: sxml?
;;;Slobovicizes the given sxml structure
(define slobovicize/kernel
  (lambda (val)
    (cond
      [(string? val)
       (replace-xml-text val)]
      [else
       val])))


(define slobovicize
  (lambda (val)
    (cond
      [(string? val)
       (slobovicize/kernel val)]
      [(pair? val)
       (cond
         [(eq? (car val) '@)
          val]
         [else
          (map slobovicize val)])]
      [else
       val])))




;;;;_------------------------------------------------------------------------PART 5
;------------------ IS THAT ESPANOL OR ENGLISH?
;------------------ This algorithm analyzes a given text and determines if the text is in Spanish or in English language. If it cannot determine, it will give a message that
;------------------ says that it cannot determine the language of the text-input. A large input is favored because it utilizes 500 of the most common words of each language. With
;------------------ a small sample, the system may not determine what language it is
;CITATION 4

(require csc151www)
(require csc151/rex)
(require csc151)
(require rackunit)

(define contents-extracted-lang
  (lambda (url)
    (let* ([xml-code (fetch-page url)]
           [content (apply string-append (sxpath-match "//text()" xml-code))]
           [rex-word (rex-repeat (rex-any-of (rex-char-range #\a #\z)
                                             (rex-char-range #\A #\Z)
                                             (rex-string "'")))])
      (rex-find-matches rex-word content))))

;;;common-english-words
;;;Derives a list of the most commonly used English words
(define common-english-words
  (let ([rex-word
         (rex-repeat (rex-any-of (rex-char-range #\a #\z)
                                 (rex-char-range #\A #\Z)
                                 (rex-string "'")))])
    (rex-find-matches rex-word (file->string "english.txt")))) ;CITATION 2

;;;common-spanish-words
;;;Derives a list of the most commonly used Spanish words
(define common-spanish-words
  (let ([rex-word
         (rex-repeat (rex-any-of (rex-char-range #\a #\z)
                                 (rex-char-range #\A #\Z)
                                 (rex-string "'")))])
    (rex-find-matches rex-word (file->string "spanish.txt")))) ;CITATION 3


;;;(english-word? word)->boolean?
;;;word-string?
;;;returns true if the word is a member of the most commonly used English words
(define english-word?
  (lambda (word)
    (member? word (map string-downcase common-english-words))))

;;;(num-english-words url)-> integer?
;;;url->string?
;;;Return the number of commonly used English words that are mentioned in the string input, url
(define num-english-words
  (lambda (url)
    (count identity (map english-word? (map string-downcase (contents-extracted-lang url))))))



;;;(spanish-word? word)->boolean?
;;;word-string?
;;;returns true if the word is a member of the most commonly used Spanish words
(define spanish-word?
  (lambda (word)
    (member? word (map string-downcase common-spanish-words))))


;;;(num-english-words url)-> integer?
;;;url->string?
;;;Return the number of commonly used English words that are mentioned in the string input, url
(define num-spanish-words
  (lambda (url)
    (count identity (map spanish-word? (map string-downcase (contents-extracted-lang url))))))

;;;(%-of-english-words url)->number?
;;;url->string?
;;;Returns the percentage of english words in the given text  input, url
(define %-of-english-words
  (lambda (url)
    (* 100 (/ (num-english-words url) (length (contents-extracted-lang url))))))

;;;(%-of-spanish-words url)->number?
;;;url->string?
;;;Returns the percentage of Spanish words in the given text  input, url
(define %-of-spanish-words
  (lambda (url)
    (* 100 (/ (num-spanish-words url) (length (contents-extracted-lang url))))))

;;;(what-language? url)->string?
;;;url->string?
;;; Determines whether given string input, url, is in Spanish or English.  
(define what-language?
  (lambda (url)
    (cond
      ((> (%-of-spanish-words url) 40)
       "El sistema determina que este texto está en español")
      ((> (%-of-english-words url) 40)
       "The system determines that this text is predominantly in English")
      (else
       "The system cannot determine which language this is"))))

#|
> (what-language? "https://www.gutenberg.org/cache/epub/2500/pg2500-images.html")
"The system determines that this text is predominantly in English"
|#





